@model dynamic

@{
    ViewBag.Title = "Question";
}

<!-- ko with: currentQuestion -->
<header>
    <h1 data-bind="text: text"></h1>
</header>
<div class="row">
    <div class="span8 well">
        
        <!-- ko foreach: answers -->
        <div class="row answer">
            <div class="span1 actions">
                <button class="btn btn-small btn-info" data-bind="click: addVote">Vote</button>
            </div>
            <div class="span1 number-of-votes" data-bind="text: votes"></div>
            <div class="span6 text" data-bind="css : { leading : $parent.leadingAnswer() == $data }">
                <a href="#" data-bind="text: text"></a>
            </div>
        </div>
        <!-- /ko -->

        <div class="row">
            <div class="offset2 span6">
                <form class="form-horizontal" data-bind="submit: addAnswer">
                    <input type="text" class="input-large" data-bind="value: newAnswer" placeholder="New answer" />
                    <input type="submit" class="btn btn-primary" value="Add" />
                </form>
            </div>
        </div>
    </div>

</div>

<div class="row" data-bind="with: leadingAnswer">
    <div class="span8">
        <h3 data-bind="text: text + ' (' + votes() + ')'"></h3>
    </div>
</div>

<!-- /ko -->

@section scripts
{
    <script type="text/javascript">

        function PageViewModel() {
            var self = this;
            
            // The current question for this page
            self.currentQuestion = ko.observable();

            // Refresh the current question from the api
            self.refresh = function () {
                // Load it
                QuickVoter.Questions.loadQuestion(@ViewBag.QuestionId).
                    done(function (m) {
                        // Create a new View Model and make it the current question
                        var q = new QuestionViewModel(m);
                        self.currentQuestion(q);
                    });
            };

            self.answerAdded = function (m) {
                if (self.currentQuestion()) {
                    self.currentQuestion().answerAdded(m);
                }
            };

            self.votesUpdated = function (m) {
                if (self.currentQuestion()) {
                    self.currentQuestion().votesUpdated(m);
                }
            };
        }

        $(function() {

            // Create the main View Model for this page
            var pageViewModel = new PageViewModel();
            pageViewModel.refresh();
            ko.applyBindings(pageViewModel);

            var hub = $.connection.questionHub;

            hub.answerAdded = pageViewModel.answerAdded;
            hub.votesUpdated = pageViewModel.votesUpdated;

            $.connection.hub.logging = true;
            $.connection.hub.start().
                done(function () {
                    hub.registerForQuestion(@ViewBag.QuestionId);
                });
        });
    </script>
}
